@model Microsoft.Owin.Diagnostics.Views.ErrorPageModel

@{
	Layout = null;
}

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width" />

	<title>Error</title>

	<link type="text/css" href="~/Content/ThemableErrorPage.css" rel="stylesheet" />
</head>
<body>
	<main class="ur-docs-errhead" id="content" role="main">
		<div class="container">
			<h1>Something bad happened</h1>
			<p>It wasn't on purpose, i promise :-)</p>
		</div>
	</main>

	<div class="container ur-docs-container error">
		@if (Model.Options.ShowExceptionDetails)
		{
			foreach (var errorDetails in this.Model.ErrorDetails)
			{
				var stackFrame = errorDetails.StackFrames.FirstOrDefault();
				var str1 = "";

				if (stackFrame != null)
				{
					str1 = errorDetails.StackFrames.First().Function;
				}
				else if (errorDetails.Error.TargetSite != null && errorDetails.Error.TargetSite.DeclaringType != null)
				{
					str1 = errorDetails.Error.TargetSite.DeclaringType.FullName + "." + errorDetails.Error.TargetSite.Name;
				}

				<h2 class="titleerror">@(errorDetails.Error.GetType().Name): @errorDetails.Error.Message</h2>

				if (!string.IsNullOrEmpty(str1) && stackFrame != null && !string.IsNullOrEmpty(stackFrame.File))
				{
					<p class="location">
						@str1 in <code title="@stackFrame.File">@System.IO.Path.GetFileName(stackFrame.File)</code>, line @stackFrame.Line
					</p>
				}
				else if (!string.IsNullOrEmpty(str1))
				{
					<p class="location">
						@str1
					</p>
				}
				else
				{
					<p class="location">
						Unknown location
					</p>
				}
			}
		}

		<ul id="header">
			@if (Model.Options.ShowExceptionDetails)
			{
				<li id="stack" tabindex="1" class="selected">Stack</li>
			}
			@if (Model.Options.ShowQuery)
			{
				<li id="query" tabindex="2">Query</li>
			}
			@if (Model.Options.ShowCookies)
			{
				<li id="cookies" tabindex="3">Cookies</li>
			}
			@if (Model.Options.ShowHeaders)
			{
				<li id="headers" tabindex="4">Headers</li>
			}
			@if (Model.Options.ShowEnvironment)
			{
				<li id="environment" tabindex="5">Environment</li>
			}
		</ul>

		@if (Model.Options.ShowExceptionDetails)
		{
			var num = 6;

			<div id="stackpage" class="page">
				<ul>
					@foreach (var details in Model.ErrorDetails)
					{
						<li>
							<h3 class="stackerror">@(details.Error.GetType().Name): details.Error.Message</h3>

							<ul>
								@foreach (var stackFrame in details.StackFrames)
								{
									++num;

									<li class="frame" start="@num">
										@if (string.IsNullOrEmpty(stackFrame.File))
										{
											<h4>@stackFrame.Function</h4>
										}
										else
										{
											<h4>@stackFrame.Function in <code title="@stackFrame.File">@stackFrame.File</code></h4>

											if (stackFrame.Line != 0 && stackFrame.ContextCode != null)
											{
												<div class="source">
													@if (stackFrame.PreContextCode != null)
													{
														<ol class="collapsable" start="@stackFrame.PreContextLine">
															@foreach (var str2 in stackFrame.PreContextCode)
															{
																<li><span>@str2</span></li>
															}
														</ol>
													}

													<ol class="highlight" start="@stackFrame.Line">
														<li><span>@stackFrame.ContextCode</span></li>
													</ol>

													@if (stackFrame.PostContextCode != null)
													{
														<ol class="collapsable" start="@(stackFrame.Line + 1)">
															@foreach (var str2 in stackFrame.PostContextCode)
															{
																<li><span>@str2</span></li>
															}
														</ol>
													}
												</div>
											}
										}
									</li>
								}
							</ul>
						</li>
					}
				</ul>
			</div>
		}
		else
		{
			<div class="alert alert-warning">Enable development mode or ErrorPageOptions.ShowExceptionDetails for additional information.</div>
		}

		@if (this.Model.Options.ShowQuery)
		{
			<div id="querypage" class="page">
				@if (this.Model.Query.Any())
				{
					<table class="table table-striped table-bordered table-hover">
						<thead>
							<tr>
								<th>Variable</th>
								<th>Value</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var keyValuePair in this.Model.Query.OrderBy(kv => kv.Key))
							{
								foreach (var str2 in keyValuePair.Value)
								{
									<tr>
										<td>@keyValuePair.Key</td>
										<td>@str2</td>
									</tr>
								}
							}
						</tbody>
					</table>
				}
				else
				{
					<div class="alert alert-warning">No QueryString data</div>
				}
			</div>
		}

		@if (Model.Options.ShowCookies)
		{
			<div id="cookiespage" class="page">
				@if (Model.Cookies.Any())
				{
					<table class="table table-striped table-bordered table-hover">
						<thead>
							<tr>
								<th>Variable</th>
								<th>Value</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var keyValuePair in this.Model.Cookies.OrderBy(kv => kv.Key))
							{
								<tr>
									<td>@keyValuePair.Key</td>
									<td>@keyValuePair.Value</td>
								</tr>
							}
						</tbody>
					</table>
				}
				else
				{
					<div class="alert alert-warning">No cookie data</div>
				}
			</div>
		}

		@if (Model.Options.ShowHeaders)
		{
			<div id="headerspage" class="page">
				@if (Model.Headers.Any())
				{
					<table class="table table-striped table-bordered table-hover">
						<thead>
							<tr>
								<th>Variable</th>
								<th>Value</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var keyValuePair in this.Model.Headers.OrderBy(kv => kv.Key))
							{
								foreach (string str2 in keyValuePair.Value)
								{
									<tr>
										<td>@keyValuePair.Key</td>
										<td>@str2</td>
									</tr>
								}
							}
						</tbody>
					</table>
				}
				else
				{
					<div class="alert alert-warning">No header data</div>
				}
			</div>
		}

		@if (Model.Options.ShowEnvironment)
		{
			<div id="environmentpage" class="page">
				@if (Model.Environment.Any())
				{
					<table class="table table-striped table-bordered table-hover">
						<thead>
						<tr>
							<th>Variable</th>
							<th>Value</th>
						</tr>
						</thead>
						<tbody>
						@foreach (var keyValuePair in this.Model.Environment.OrderBy(kv => kv.Key))
						{
							<tr>
								<td>@keyValuePair.Key</td>
								<td>@keyValuePair.Value</td>
							</tr>
						}
						</tbody>
					</table>
				}
				else
				{
					<div class="alert alert-warning">No header data</div>
				}
			</div>
		}
	</div>

	<footer>
		<div class="container">
			<small>Made by <a href="http://www.eyecatch.no">Ove Andersen</a></small>
		</div>
	</footer>

<script type="text/javascript">
	//<!--
	(function(window, undefined) {
		"use strict";

		function $(selector, element) {
			return new NodeCollection(selector, element);
		}

		function NodeCollection(selector, element) {
			this.items = [];
			element = element || window.document;

			var nodeList;

			if (typeof (selector) === "string") {
				nodeList = element.querySelectorAll(selector);
				for (var i = 0, l = nodeList.length; i < l; i++) {
					this.items.push(nodeList.item(i));
				}
			} else if (selector.tagName) {
				this.items.push(selector);
			} else if (selector.splice) {
				this.items = this.items.concat(selector);
			}
		}

		NodeCollection.prototype = {
			each: function(callback) {
				for (var i = 0, l = this.items.length; i < l; i++) {
					callback(this.items[i], i);
				}
				return this;
			},

			children: function(selector) {
				var children = [];

				this.each(function(el) {
					children = children.concat($(selector, el).items);
				});

				return $(children);
			},

			hide: function() {
				this.each(function(el) {
					el.style.display = "none";
				});

				return this;
			},

			toggle: function() {
				this.each(function(el) {
					el.style.display = el.style.display === "none" ? "" : "none";
				});

				return this;
			},

			show: function() {
				this.each(function(el) {
					el.style.display = "";
				});

				return this;
			},

			addClass: function(className) {
				this.each(function(el) {
					var existingClassName = el.className,
						classNames;
					if (!existingClassName) {
						el.className = className;
					} else {
						classNames = existingClassName.split(" ");
						if (classNames.indexOf(className) < 0) {
							el.className = existingClassName + " " + className;
						}
					}
				});

				return this;
			},

			removeClass: function(className) {
				this.each(function(el) {
					var existingClassName = el.className,
						classNames,
						index;
					if (existingClassName === className) {
						el.className = "";
					} else if (existingClassName) {
						classNames = existingClassName.split(" ");
						index = classNames.indexOf(className);
						if (index > 0) {
							classNames.splice(index, 1);
							el.className = classNames.join(" ");
						}
					}
				});

				return this;
			},

			toggleClass: function(className) {
				this.each(function(el) {
					var classNames = el.className.split(" ");
					if (classNames.indexOf(className) >= 0) {
						$(el).removeClass(className);
					} else {
						$(el).addClass(className);
					}
				});

				return this;
			},

			attr: function(name) {
				if (this.items.length === 0) {
					return null;
				}

				return this.items[0].getAttribute(name);
			},

			on: function(eventName, handler) {
				this.each(function(el, idx) {
					var callback = function(e) {
						e = e || window.event;
						if (!e.which && e.keyCode) {
							e.which = e.keyCode; // Normalize IE8 key events
						}
						handler.apply(el, [e]);
					};

					if (el.addEventListener) { // DOM Events
						el.addEventListener(eventName, callback, false);
					} else if (el.attachEvent) { // IE8 events
						el.attachEvent("on" + eventName, callback);
					} else {
						el["on" + type] = callback;
					}
				});

				return this;
			},

			click: function(handler) {
				return this.on("click", handler);
			},

			keypress: function(handler) {
				return this.on("keypress", handler);
			}
		};

		function frame(el) {
			$(el).children(".source .collapsible").toggle();
		}

		function tab(el) {
			var unselected = $("#header .selected").removeClass("selected").attr("id");
			var selected = $(el).addClass("selected").attr("id");

			$("#" + unselected + "page").hide();
			$("#" + selected + "page").show();
		}

		$(".collapsible").hide();
		$(".page").hide();
		$("#stackpage").show();

		$(".frame")
			.click(function() {
				frame(this);
			})
			.keypress(function(e) {
				if (e.which === 13) {
					frame(this);
				}
			});

		$("#header li")
			.click(function() {
				tab(this);
			})
			.keypress(function(e) {
				if (e.which === 13) {
					tab(this);
				}
			});
	})(window);
	//-->
	</script>
</body>
</html>